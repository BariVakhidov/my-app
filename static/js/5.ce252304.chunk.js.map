{"version":3,"sources":["components/News/News.jsx"],"names":["News"],"mappings":"+HAMeA,UALF,WACT,OACI","file":"static/js/5.ce252304.chunk.js","sourcesContent":["import React from \"react\";\nconst News = () => {\n    return (\n        <div>News</div>\n    );\n};\nexport default News;\n/*\nimport React, {useEffect, useRef, useMemo} from 'react'\nimport * as THREE from 'three'\nimport {Canvas, extend, useFrame, useThree} from 'react-three-fiber'\nimport {EffectComposer} from 'three/examples/jsm/postprocessing/EffectComposer'\nimport {ShaderPass} from 'three/examples/jsm/postprocessing/ShaderPass'\nimport {RenderPass} from 'three/examples/jsm/postprocessing/RenderPass'\nimport {AfterimagePass} from 'three/examples/jsm/postprocessing/AfterimagePass'\nimport {FXAAShader} from 'three/examples/jsm/shaders/FXAAShader'\nimport {UnrealBloomPass} from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport {WaterPass} from './Waterpass'\nimport {Effects} from '@react-three/drei/Effects'\nimport './styles.css'\nimport s from \"./News.module.css\"\n\nextend({EffectComposer, ShaderPass, RenderPass, WaterPass, AfterimagePass, UnrealBloomPass})\n\n\nconst Swarm = ({ count }) => {\n    const mesh = useRef()\n    const light = useRef()\n    const { viewport, mouse } = useThree()\n\n    const dummy = useMemo(() => new THREE.Object3D(), [])\n    // Generate some random positions, speed factors and timings\n    const particles = useMemo(() => {\n        const temp = []\n        for (let i = 0; i < count; i++) {\n            const t = Math.random() * 100\n            const factor = 20 + Math.random() * 100\n            const speed = 0.01 + Math.random() / 200\n            const xFactor = -50 + Math.random() * 100\n            const yFactor = -50 + Math.random() * 100\n            const zFactor = -50 + Math.random() * 100\n            temp.push({ t, factor, speed, xFactor, yFactor, zFactor, mx: 0, my: 0 })\n        }\n        return temp\n    }, [count])\n    // The innards of this hook will run every frame\n    useFrame((state) => {\n        // Makes the light follow the mouse\n        light.current.position.set((mouse.x * viewport.width) / 2, (mouse.y * viewport.height) / 2, 0)\n        // Run through the randomized data to calculate some movement\n        particles.forEach((particle, i) => {\n            let { t, factor, speed, xFactor, yFactor, zFactor } = particle\n            // There is no sense or reason to any of this, just messing around with trigonometric functions\n            t = particle.t += speed / 2\n            const a = Math.cos(t) + Math.sin(t * 1) / 10\n            const b = Math.sin(t) + Math.cos(t * 2) / 10\n            const s = Math.cos(t)\n            particle.mx += mouse.x * viewport.width * particle.mx * 0.01\n            particle.my += mouse.y * viewport.height * particle.my * 0.01\n            // Update the dummy object\n            dummy.position.set(\n                (particle.mx / 10) * a + xFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 1) * factor) / 10,\n                (particle.my / 10) * b + yFactor + Math.sin((t / 10) * factor) + (Math.cos(t * 2) * factor) / 10,\n                (particle.my / 10) * b + zFactor + Math.cos((t / 10) * factor) + (Math.sin(t * 3) * factor) / 10\n            )\n            dummy.scale.set(s, s, s)\n            dummy.rotation.set(s * 5, s * 5, s * 5)\n            dummy.updateMatrix()\n            // And apply the matrix to the instanced item\n            mesh.current.setMatrixAt(i, dummy.matrix)\n        })\n        mesh.current.instanceMatrix.needsUpdate = true\n    })\n    return (\n        <>\n            <pointLight ref={light} distance={60} intensity={0.2} color=\"red\" />\n            <instancedMesh ref={mesh} args={[null, null, count]}>\n                <dodecahedronBufferGeometry args={[1, 0]} />\n                <meshStandardMaterial color=\"black\" />\n            </instancedMesh>\n        </>\n    )\n}\nconst Dolly =() => {\n    // This one makes the camera move in and out\n    useFrame(({ clock, camera }) => {\n        camera.position.z = 50 + Math.sin(clock.getElapsedTime()) * 30\n    })\n    return null\n}\nconst News = () => {\n    return (\n        <Canvas camera={{fov: 75, position: [0, 0, 70]}}>\n            <pointLight intensity={0.2} color=\"white\"/>\n            <spotLight intensity={0.2} position={[70, 70, 70]} penumbra={1} color=\"lightblue\"/>\n            <Swarm count={20000}/>\n            <Effects>\n                <waterPass attachArray=\"passes\" factor={2}/>\n                <unrealBloomPass attachArray=\"passes\" args={[undefined, 1.5, 1, 0]}/>\n            </Effects>\n            <Dolly/>\n        </Canvas>\n    );\n};\nexport default News;\n*/\n"],"sourceRoot":""}